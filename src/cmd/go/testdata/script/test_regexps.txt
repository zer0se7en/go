go test -cpu=1 -run=X/Y -bench=X/Y -count=2 -v testregexp

# Test the following:

#	TestX is run, twice
stdout -count=2 '^=== RUN   TestX$'
stdout -count=2 '^    TestX: x_test.go:6: LOG: X running$'

#	TestX/Y is run, twice
stdout -count=2 '^=== RUN   TestX/Y$'
stdout -count=2 '^    TestX/Y: x_test.go:8: LOG: Y running$'

#	TestXX is run, twice
stdout -count=2 '^=== RUN   TestXX$'
stdout -count=2 '^    TestXX: z_test.go:10: LOG: XX running'

#	TestZ is not run
! stdout '^=== RUN   TestZ$'

#	BenchmarkX is run but only with N=1, once
stdout -count=1 '^    BenchmarkX: x_test.go:13: LOG: X running N=1$'
! stdout '^    BenchmarkX: x_test.go:13: LOG: X running N=10$'

#	BenchmarkXX is run but only with N=1, once
stdout -count=1 '^    BenchmarkXX: z_test.go:18: LOG: XX running N=1$'
! stdout  '^    BenchmarkXX: z_test.go:18: LOG: XX running N=10$'

#	BenchmarkX/Y is run in full, twice
stdout -count=2 '    BenchmarkX/Y: x_test.go:15: LOG: Y running N=1\n    BenchmarkX/Y: x_test.go:15: LOG: Y running N=100\n    BenchmarkX/Y: x_test.go:15: LOG: Y running N=10000\n    BenchmarkX/Y: x_test.go:15: LOG: Y running N=1000000\n    BenchmarkX/Y: x_test.go:15: LOG: Y running N=100000000\n    BenchmarkX/Y: x_test.go:15: LOG: Y running N=1000000000'

-- testregexp/x_test.go --
package x

import "testing"

func TestX(t *testing.T) {
	t.Logf("LOG: X running")
	t.Run("Y", func(t *testing.T) {
		t.Logf("LOG: Y running")
	})
}

func BenchmarkX(b *testing.B) {
	b.Logf("LOG: X running N=%d", b.N)
	b.Run("Y", func(b *testing.B) {
		b.Logf("LOG: Y running N=%d", b.N)
	})
}
-- testregexp/z_test.go --
package x

import "testing"

func TestZ(t *testing.T) {
	t.Logf("LOG: Z running")
}

func TestXX(t *testing.T) {
	t.Logf("LOG: XX running")
}

func BenchmarkZ(b *testing.B) {
	b.Logf("LOG: Z running N=%d", b.N)
}

func BenchmarkXX(b *testing.B) {
	b.Logf("LOG: XX running N=%d", b.N)
}